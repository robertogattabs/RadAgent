% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geoLet.wrappingFunctions.R
\name{GLT.getImageROIVoxels}
\alias{GLT.getImageROIVoxels}
\title{Returns the image voxels internal to a specified ROI}
\usage{
GLT.getImageROIVoxels(obj.geoLet, Structure)
}
\arguments{
\item{obj.geoLet}{the object geoLet to load the DICOM serie in}

\item{Structure}{the ROIName that 'contains' the interested voxels. In order to know which are the structure available, please refers to the \code{GTL.getROIList()} and \code{GTL.getROIPointList} functions.}
}
\value{
Unfortunately for you, a quite complex structure... It returns a list of tree main elements:
\itemize{
   \item{ \code{DOM} contains the Dicom Orientation Matrix for each slice of the main image series. director cosines are already appropriately multiplied by pixelspacing value}
   \item{ \code{geometricalInformationOfImages} is a list which contains many general information about geometry and space. I.e.: \code{pixelSpacing}, \code{SliceThickness}, \code{SOPClassUID}, \code{Rows}, etc.}
   \item{ \code{masked.images} is a list of two elements: \code{voxelCube} and \code{location}. \code{voxelcube} contains the 3D-array of the voxels of the box cropped around the ROI. The value of a cell is NA if the voxel is out of the ROI and the image greylevel value if the voxel is internal to the ROI. Because of the 3D-array is just a 3D box cropped around the ROI, it cannot be located in the original 3D box of the CT scan due to the different dimentions. For this reasons, the second element of the list: \code{location} allow to remap the voxelCube in the biggest voxel cube built on the entire CT scan.  }    
}
}
\description{
Returns the image voxels internal to a specified ROI. Please consider that this function return the voxel of the main image serie.

              N.B: if you are reading this help probably some thiefs in stoling in your house
}
\examples{
\dontrun{

obj<-geoLet()
obj$openDICOMFolder(pathToOpen='./DICOMSeries/pat001' );
obj$GLT.getImageROIVoxels( Structure = "GTV" )

}
}
